### TO_BITWISE
## Converts the pdxvar "to_bitwise_input" (when multiplied by 1000) a 32-bit signed integer bit array and pushes the result to a specified array
## The below function has 2 parameters: to_bitwise_input and temp_array_id
## These parameters will be cleared(by resetting to 0) after the function execution
## BITWISE_INPUT
# The variable to be converted into bitwise format
# If no input is given, the function will use 0 in place **and return no error**
## ARRAY_ID
# the array_id identifies which temp array is to be used, in the format "temp_array_[?id]"
# If no array_id is assigned, the function will use temp_array_0 in place
# If the array_id is not an integer, then the function will display an error
## Errors consist of a temp error var (bitwise_error_flag) and a message in log corresponding to the error
to_bitwise = {
    set_temp_variable = { whole_check = temp_array_id }
    round_temp_variable = whole_check
    if = {
        limit = {
            NOT = { check_variable = { whole_check = temp_array_id } }
        }

        add_to_temp_variable = { bitwise_error_flag = 1 }
        log="to_bitwise array_id error, temp_array_id = [?temp_array_id]"
    }
    set_temp_variable = { bitwise_to_process = to_bitwise_input }
    clear_temp_array = temp_array_@var:temp_array_id
    resize_temp_array = { temp_array_@var:temp_array_id = 32 }
    
    # Checks if temp bitwise is negative, if so, flip sign bit and prepare for remaining conversion
    if = {
        limit = {
            check_variable = { bitwise_to_process < 0 }
        }
        set_temp_variable = { temp_array_@var:temp_array_id^0 = 1 }
        add_to_temp_variable = { bitwise_to_process = 2147483.648 }
    }

    # convert bitwise_to_process to remaining 31 bits
    set_temp_variable = { bit_compare = 1073741.824 }
    for_loop_effect = {
        start = 1
        end = 32
        compare = less_than
        value = idx
        
        if = {
            limit = {
                check_variable = {
                    var = bitwise_to_process
                    value = bit_compare
                    compare = greater_than_or_equals
                }
            }

            set_temp_variable = { temp_array_@var:temp_array_id^idx = 1 }
            subtract_from_temp_variable = { bitwise_to_process = bit_compare }
        }
        divide_temp_variable = { bit_compare = 2 }
    }
    set_temp_variable = { to_bitwise_input = 0 }
    set_temp_variable = { temp_array_id = 0 }
}
### STORE_BITWISE
## Converts the bit array inputted to a 32-bit signed integer, divides it by 1000, and pushes the result to a pdxvar
## The below function has 1 parameter: temp_array_id
## This parameter will be cleared(by resetting to 0) after the function execution
## If any element used is not one or zero, then the function will display an error
## ARRAY_ID
# the array_id identifies which temp array is to be used, in the format "temp_array_[?id]"
# If no array_id is assigned, the function will use temp_array_0 in place
# If the array_id is not an integer, then the function will display an error
# If the array is not 32 bits long, the function will display an error
## The output will be sent to the temp var store_bitwise_output
## Errors consist of a temp error var (bitwise_error_flag) and a message in log corresponding to the error
store_bitwise = {
    set_temp_variable = { whole_check = temp_array_id }
    round_temp_variable = whole_check
    if = {
        limit = {
            NOT = { check_variable = { whole_check = temp_array_id } }
        }

        add_to_temp_variable = { bitwise_error_flag = 1 }
        log="store_bitwise array_id error, temp_array_id = [?temp_array_id]"
    }
    if = {
        limit = {
            NOT = { check_variable = { temp_array_@var:temp_array_id^num = 32 } }
        }

        add_to_temp_variable = { bitwise_error_flag = 1 }
        log="store_bitwise array length error, temp_array_id = [?temp_array_id], array length = [?temp_array_@var:temp_array_id^num]"
    }
    for_loop_effect = {
        start = 0
        end = 32
        value = idx

        if = {
            limit = {
                AND = {
                    NOT = { check_variable = { temp_array_@var:temp_array_id^idx = 0 } }
                    NOT = { check_variable = { temp_array_@var:temp_array_id^idx = 1 } }
                }
            }
            add_to_temp_variable = { bitwise_error_flag = 1 }
            log = "store_bitwise value error, temp_array_id = [?temp_array_id], value = [?temp_array_@var:temp_array_id^idx], index = [?idx]"
        }
    }

    set_temp_variable = { store_bitwise_output = 0 }
    if = {
        limit = {
            check_variable = { temp_array_@var:temp_array_id^0 = 1 }
        }
        set_temp_variable = { store_bitwise_output = -2147483.648 }
    }
    set_temp_variable = { bit_compare = 1073741.824 }
    for_loop_effect = {
        start = 1
        end = 32
        value = idx

        if = {
            limit = {
                check_variable = { temp_array_@var:temp_array_id^idx = 1 }
            }
            add_to_temp_variable = { store_bitwise_output = bit_compare }
        }
        divide_temp_variable = { bit_compare = 2 }
    }
    set_temp_variable = { temp_array_id = 0 }
}

### REVERSE ARRAY
## This effect reverses an array and pushes it to a new array
## The below functions have 2 parameters, some optional: temp_array_id, temp_array_output_id
## These parameters will be cleared(by resetting to 0) after the function execution
## ARRAY_ID
# the temp_array_ids identify which temp array is to be used, in the format "temp_array_[?id]"
# If no temp_array_id is assigned, the function will use temp_array_0 in place
# If the temp_array_id is not an integer, then the function will display an error
## OUTPUT_ID
# Finally, the output_id identifies the array that the function will push the result to
# If no output_id is assigned, the function will use temp_array_0 in place
# If the temp_array_id is not an integer, then the function will display an error
# If the output_id is equal to temp_array_id, then the function will display an error because an array will be overriden
## Errors consist of a temp error var (bitwise_error_flag) and a message in log corresponding to the error
reverse_array = {
    set_temp_variable = { whole_check = temp_array_id }
    round_temp_variable = whole_check
    set_temp_variable = { whole_check_o = temp_array_output_id }
    round_temp_variable = whole_check_o
    if = {
        limit = {
            OR = {
                NOT = { check_variable = { whole_check = temp_array_id } }
                NOT = { check_variable = { whole_check_o = temp_array_output_id } }
            }
        }
        add_to_temp_variable = { bitwise_error_flag = 1 }
        log = "copy_array array_id error, array_id = [?temp_array_id], array_output_id = [?temp_array_output_id]"
    }
    if = {
        limit = {
            check_variable = { temp_array_id = temp_array_output_id }
        }
        add_to_temp_variable = { bitwise_error_flag = 1 }
        log = "copy_array output_id error, array_id = [?temp_array_id], array_output_id = [?temp_array_output_id]"
    }

    set_temp_variable = { left_idx = 0 }
    set_temp_variable = { temp_end = temp_array_@var:temp_array_id^num }
    set_temp_variable = { right_idx = temp_end }
    subtract_from_temp_variable = { right_idx = 1 }
    resize_temp_array = {
        array = temp_array_@var:temp_array_output_id
        size = temp_array_@var:temp_array_id^num
        value = 0
    }
    for_loop_effect = {
        start = 0
        end = temp_end
        compare = less_than
        add = 2

        set_temp_variable = { temp_array_@var:temp_array_output_id^left_idx = temp_array_@var:temp_array_id^right_idx }
        set_temp_variable = { temp_array_@var:temp_array_output_id^right_idx = temp_array_@var:temp_array_id^left_idx }
        add_to_temp_variable = { left_idx = 1 }
        subtract_from_temp_variable = { right_idx = 1 }
    }

    set_temp_variable = { temp_array_id = 0 }
    set_temp_variable = { temp_array_output_id = 0 }
}