# Simple loop with addition, to display basic syntax
# Would probably be recommended to denote your floating-point variables differently, since they still can be modified by regular operations like add_to_temp_variable.
ieee_example_loop = {
    set_temp_variable = { sum = 0 } # float(0) = 0
    set_temp_variable = { addend = 100000 }
    set_temp_variable = { iter = 500 }
    for_loop_effect = {
        end = iter

        set_temp_variable = { arg_a = addend }
        pdxvar_to_float = yes

        set_temp_variable = { arg_a = sum }
        set_temp_variable = { arg_b = out_a }
        ieeeAdd = yes
        set_temp_variable = { sum = out_a }
    }
    set_temp_variable = { to_print_float = sum }
    log="[?addend] * [?iter] ~ [print_float_full]"

    add_to_temp_variable = { sum = addend } # Incorrect operation, does not add addend to the floating-point variable `sum`
    set_temp_variable = { to_print_float = sum }
    log="sum + 100000 != [print_float_full]"
}
# Printing Fibonacci sequence until infinity
# Note how round-off error occurs by the 37th Fibonacci number, as F(37) = 24157817, not 24157816
ieee_example_fibonacci = {
    set_temp_variable = { iter = 0 }
    set_temp_variable = { fib_a = 0 }
    set_temp_variable = { to_print_float = fib_a }

    add_to_temp_array = { multi_print_float = fib_a }
    add_to_temp_array = { multi_print_style = 0 }
    add_to_temp_array = { multi_print_param = 0 }
    add_to_temp_array = { multi_print_float = fib_a }
    add_to_temp_array = { multi_print_style = 4 }
    add_to_temp_array = { multi_print_param = 5 }
    log="Fibonacci [?iter]: [print_multi_float] ~ [print_multi_float]"

    set_temp_variable = { iter = 1 }
    set_temp_variable = { arg_a = 1 }
    pdxvar_to_float = yes
    set_temp_variable = { fib_b = out_a }

    add_to_temp_array = { multi_print_float = fib_b }
    add_to_temp_array = { multi_print_style = 0 }
    add_to_temp_array = { multi_print_param = 0 }
    add_to_temp_array = { multi_print_float = fib_b }
    add_to_temp_array = { multi_print_style = 4 }
    add_to_temp_array = { multi_print_param = 5 }
    log="Fibonacci [?iter]: [print_multi_float] ~ [print_multi_float]"

    set_temp_variable = { posinf = 2139095.040 }
    while_loop_effect = {
        limit = {
            # fib_b(last calculated fibonacci number) < infinity
            set_temp_variable = { arg_a = fib_b }
            set_temp_variable = { arg_b = posinf }
            compareLess = yes
        }

        set_temp_variable = { arg_a = fib_a }
        set_temp_variable = { arg_b = fib_b }
        ieeeAdd = yes

        add_to_temp_variable = { iter = 1 }
        add_to_temp_array = { multi_print_float = out_a }
        add_to_temp_array = { multi_print_style = 0 }
        add_to_temp_array = { multi_print_param = 0 }
        add_to_temp_array = { multi_print_float = out_a }
        add_to_temp_array = { multi_print_style = 4 }
        add_to_temp_array = { multi_print_param = 5 }
        log="Fibonacci [?iter]: [print_multi_float] ~ [print_multi_float]"

        set_temp_variable = { fib_a = fib_b }
        set_temp_variable = { fib_b = out_a }
    }
}