# Prints either a minus or plus sign depending on the value of the temp var ieee_sign_bit(0 -> +, 1 -> -) 
defined_text = {
    name = ieee_plus_minus_decider
    text = {
        trigger = {
            check_variable = { ieee_sign_bit = 1 }
        }
        localization_key = ieee_minus_sign
    }
    text = {
        localization_key = ieee_plus_sign
    }
}
# Prints a plus depending on the decimal power of the number for scientific notation, since the minus is already printed
defined_text = {
    name = ieee_sci_plus_decider
    text = {
        trigger = {
            check_variable = { ieee_out_power < 0 }
        }
        localization_key = ieee_empty
    }
    text = {
        localization_key = ieee_plus_sign
    }
}
# Prints ONLY a minus depending on the value of the temp var ieee_sign_bit(0 -> nothing, 1 -> -)
defined_text = {
    name = ieee_minus_decider
    text = {
        trigger = {
            check_variable = { ieee_sign_bit = 1 }
        }
        localization_key = ieee_minus_sign
    }
    text = {
        localization_key = ieee_empty
    }
}
# Prints the array temp_array_[?temp_array_id]
defined_text = {
    name = debug_print_array_id
    text = {
        trigger = {
            all_of = {
                array = temp_array_@var:temp_array_id
                value = v

                add_to_temp_array = { to_print_array = v }
            }
        }
        localization_key = ieee_print_array_id
    }
}
# The next three scripted locs print the content of temp array to_print_array using a recursive step, limited to a max length of about 128. You should not execute the _step or the clear_ by themselves
defined_text = {
    name = debug_print_array
    text = {
        trigger = {
            check_variable = { to_print_array^num = 0 }
        }
        localization_key = ieee_empty
    }
    text = {
        trigger = {
            set_temp_variable = { temp_index = 0 }
        }
        localization_key = ieee_print_array
    }
}
defined_text = {
    name = debug_print_array_step
    text = {
        trigger = {
            add_to_temp_variable = { temp_index = 2 }

            set_temp_variable = { temp_index_a = temp_index }
            subtract_from_temp_variable = { temp_index_a = 2 }
            set_temp_variable = { temp_index_b = temp_index }
            subtract_from_temp_variable = { temp_index_b = 1 }

            always = no
        }
        localization_key = ieee_empty
    }
    text = {
        trigger = {
            check_variable = { temp_index > to_print_array^num }
        }
        localization_key = ieee_print_array_step_1
    }
    text = {
        trigger = {
            check_variable = { temp_index = to_print_array^num }
        }
        localization_key = ieee_print_array_step_2
    }
    text = {
        localization_key = ieee_print_array_step_rec
    }
}
defined_text = {
    name = clear_to_print_array
    text = {
        trigger = {
            clear_temp_array = to_print_array
        }
        localization_key = ieee_empty
    }
}

## Multi-print wrapper
## In order to print multiple floats in one loc block, you need to push values to three arrays
## multi_print_float: determines the value to be printed(again, please note this is NOT the same as the actual value of the element)
## multi_print_style: determines the mode of printing(0: full, 1: trunc, 2: pdx, 3: round, 4: sci). Any other number will use the full print mode
## multi_print_param: determines the number of significant digits for rounded and scientific printing modes(unused for other modes). Any negative or non-whole value will default to zero
## Every time you call print_multi_float, the first value in each array will be popped and used to print the floating-point variable.
## If the size of the arrays differ, you will only be able to print as many times as there are values in the multi_print_float array. Further calls to the print_multi_float scripted loc will print "0"
defined_text = {
    name = print_multi_float
    text = {
        trigger = {
            # Extract values, then decide printing mode
            set_temp_variable = { to_print_float = multi_print_float^0 }
            remove_from_temp_array = {
                array = multi_print_float
                index = 0
            }
            set_temp_variable = { to_print_style = multi_print_style^0 }
            remove_from_temp_array = {
                array = multi_print_style
                index = 0
            }
            set_temp_variable = { to_print_param = multi_print_param^0 }
            remove_from_temp_array = {
                array = multi_print_param
                index = 0
            }

            # Sanitize param, if decimal or less than zero, default to 0, with no error played
            set_temp_variable = { whole_check = to_print_param }
            round_temp_variable = whole_check
            if = {
                limit = {
                    OR = {
                        NOT = { check_variable = { whole_check = to_print_param } }
                        check_variable = { to_print_param < 0 }
                    }
                }
                set_temp_variable = { to_print_param = 0 }
            }

            check_variable = { to_print_style = 0 }
        }
        localization_key = ieee_print_float_full
    }
    text = {
        trigger = {
            check_variable = { to_print_style = 1 }
        }
        localization_key = ieee_print_float_trunc
    }
    text = {
        trigger = {
            check_variable = { to_print_style = 2 }
        }
        localization_key = ieee_print_float_pdx
    }
    text = {
        trigger = {
            check_variable = { to_print_style = 3 }
        }
        localization_key = ieee_print_float_round
    }
    text = {
        trigger = {
            check_variable = { to_print_style = 4 }
        }
        localization_key = ieee_print_float_sci
    }
    text = {
        localization_key = ieee_print_float_full
    }
}
## Floating-point localization wrappers
## Generally, these use to_print_float as the input float, which will *not* be the same as the value stored in the pdxvar
# Prints the given array to_print_digit_array, using to_print_digit_power to determine where to place the decimal point
# No rounding will be done
defined_text = {
    name = print_float_full
    text = {
        trigger = {
            # First, convert input to bits
            set_temp_variable = { to_bitwise_input = to_print_float }
            set_temp_variable = { temp_array_id = 0 }
            to_bitwise_trigger = yes

            # Then, use bits to convert to digit array
            set_temp_variable = { temp_array_id = 0 }
            to_digit_array_trigger = yes

            # Finally, print digits out
            set_temp_variable = { print_sign_bit = ieee_sign_bit }
            set_temp_variable = { print_inf_flag = ieee_inf_flag }
            set_temp_variable = { print_nan_flag = ieee_nan_flag }
            all_of = {
                array = ieee_out_array
                value = val

                add_to_temp_array = { to_print_digit_array = val }
            }
            set_temp_variable = { to_print_digit_power = ieee_out_power }
        }
        localization_key = ieee_print_digit
    }
}
# Prints the given array to_print_digit_array, using to_print_digit_power to determine where to place the decimal point
# Any decimal component will be truncated, rounding towards 0, meaning if -1 < number < 1 for example, then "0" will be displayed
defined_text = {
    name = print_float_trunc
    text = {
        trigger = {
            # First, convert input to bits
            set_temp_variable = { to_bitwise_input = to_print_float }
            set_temp_variable = { temp_array_id = 0 }
            to_bitwise_trigger = yes

            # Then, use bits to convert to digit array
            set_temp_variable = { temp_array_id = 0 }
            to_digit_array_trigger = yes

            # Finally, print digits out
            set_temp_variable = { print_sign_bit = ieee_sign_bit }
            set_temp_variable = { print_inf_flag = ieee_inf_flag }
            set_temp_variable = { print_nan_flag = ieee_nan_flag }
            set_temp_variable = { to_print_digit_power = ieee_out_power }
            all_of = {
                array = ieee_out_array
                value = val
                index = idx

                if = {
                    limit = {
                        NOT = { check_variable = { idx > ieee_out_power } }
                    }
                    add_to_temp_array = { to_print_digit_array = val }
                }
            }
            if = {
                limit = {
                    check_variable = { to_print_digit_array^num = 0 }
                }

                add_to_temp_array = { to_print_digit_array = 0 }
                set_temp_variable = { to_print_digit_power = 0 }
            }
        }
        localization_key = ieee_print_digit
    }
}
# Prints the given array to_print_digit_array, using to_print_digit_power to determine where to place the decimal point
# This number will be rounded to the thousandths place, as if it was converted to a pdxvar first
defined_text = {
    name = print_float_pdx
    text = {
        trigger = {
            # First, convert input to bits
            set_temp_variable = { to_bitwise_input = to_print_float }
            set_temp_variable = { temp_array_id = 0 }
            to_bitwise_trigger = yes

            # Then, use bits to convert to digit array
            set_temp_variable = { temp_array_id = 0 }
            to_digit_array_trigger = yes

            # Finally, print digits out
            set_temp_variable = { print_sign_bit = ieee_sign_bit }
            set_temp_variable = { print_inf_flag = ieee_inf_flag }
            set_temp_variable = { print_nan_flag = ieee_nan_flag }

            # Process digits to pdxvar format
            truncate_digit_array_trigger = yes
            
            # If empty, set to 0 by default
            if = {
                limit = {
                    check_variable = { to_print_digit_array^num = 0 }
                }

                add_to_temp_array = { to_print_digit_array = 0 }
                set_temp_variable = { to_print_digit_power = 0 }
            }
        }
        localization_key = ieee_print_digit
    }
}
# Prints the given array to_print_digit_array, using to_print_digit_power to determine where to place the decimal point
# This scripted loc takes an additional parameter, print_digits_param, which is used to determine how many digits to round to. A value of either *0* or higher than the number of digits in the number will display the entire value
defined_text = {
    name = print_float_round
    text = {
        trigger = {
            # First, convert input to bits
            set_temp_variable = { to_bitwise_input = to_print_float }
            set_temp_variable = { temp_array_id = 0 }
            to_bitwise_trigger = yes

            # Then, use bits to convert to digit array
            set_temp_variable = { temp_array_id = 0 }
            to_digit_array_trigger = yes

            # If parameter is 0, set it to large
            if = {
                limit = {
                    check_variable = { to_print_param = 0 }
                }
                set_temp_variable = { to_print_param = ieee_out_array^num }
                add_to_temp_variable = { to_print_param = 1 }
            }

            # Finally, print digits out
            set_temp_variable = { print_sign_bit = ieee_sign_bit }
            set_temp_variable = { print_inf_flag = ieee_inf_flag }
            set_temp_variable = { print_nan_flag = ieee_nan_flag }
            set_temp_variable = { to_print_digit_power = ieee_out_power }
            
            # Set a few useful values for rounding later
            set_temp_variable = { least_sig_digit_idx = to_print_param }
            subtract_from_temp_variable = { least_sig_digit_idx = 1 }
            set_temp_variable = { least_sig_digit = ieee_out_array^least_sig_digit_idx }
            modulo_temp_variable = { least_sig_digit = 2 }
            set_temp_variable = { round_digit_threshold = to_print_param }
            add_to_temp_variable = { round_digit_threshold = 1 }
            all_of = {
                array = ieee_out_array
                value = val
                index = idx

                if = {
                    limit = {
                        check_variable = { idx < to_print_param }
                    }
                    add_to_temp_array = { to_print_digit_array = val }
                }
                else_if = {
                    limit = {
                        check_variable = { idx = to_print_param }
                        ### Rounds using the recommended TiesToEven, consult 4.3 (pg 27) in ieee_754.pdf
                        OR = {
                            check_variable = { val > 5 }
                            AND = {
                                check_variable = { val = 5 }
                                OR = {
                                    check_variable = { ieee_out_array^num > round_digit_threshold }
                                    check_variable = { least_sig_digit = 1 }
                                }
                            }
                        }

                    }
                    ### add one to previous var and propagate addition
                    set_temp_variable = { prev_idx = to_print_param }
                    subtract_from_temp_variable = { prev_idx = 1 }
                    add_to_temp_variable = { to_print_digit_array^prev_idx = 1 }

                    all_of = {
                        array = ieee_out_array
                        index = idx
                        
                        # traverse array backwards
                        set_temp_variable = { carry_idx = ieee_out_array^num }
                        subtract_from_temp_variable = { carry_idx = idx }
                        subtract_from_temp_variable = { carry_idx = 1 }
                        
                        if = {
                            limit = {
                                check_variable = { to_print_digit_array^carry_idx > 9 }
                            }
                            subtract_from_temp_variable = { to_print_digit_array^carry_idx = 10 }

                            set_temp_variable = { prev_idx = carry_idx }
                            subtract_from_temp_variable = { prev_idx = 1 }
                            if = {
                                limit = {
                                    check_variable = { prev_idx = -1 }
                                }

                                add_to_temp_array = {
                                    array = to_print_digit_array
                                    index = 0
                                    value = 1
                                }
                                add_to_temp_variable = { to_print_digit_power = 1 }
                            }
                            else = {
                                add_to_temp_variable = { to_print_digit_array^prev_idx = 1 }
                            }


                            # Trim trailing zeroes if after decimal
                            set_temp_variable = { temp_array_size = to_print_param }
                            # Pad after significant digits
                            set_temp_variable = { temp_power_digits = to_print_digit_power }
                            add_to_temp_variable = { temp_power_digits = 1 }
                            if = {
                                limit = {
                                    check_variable = { temp_power_digits > temp_array_size }
                                }
                                set_temp_variable = { temp_array_size = temp_power_digits }
                            }
                            resize_temp_array = { to_print_digit_array = temp_array_size }
                        }
                    }
                }
            }
            if = {
                limit = {
                    check_variable = { to_print_digit_array^num = 0 }
                }

                add_to_temp_array = { to_print_digit_array = 0 }
                set_temp_variable = { to_print_digit_power = 0 }
            }
        }
        localization_key = ieee_print_digit
    }
}
# Prints the given array to_print_digit_array in a scientific value format, using to_print_digit_power to determine the power of 10
# This scripted loc takes an additional parameter, to_print_param, which is used to determine how many digits to round to. A value of either *0* or higher than the number of digits in the number will display the entire value
defined_text = {
    name = print_float_sci
    text = {
        trigger = {
            # First, convert input to bits
            set_temp_variable = { to_bitwise_input = to_print_float }
            set_temp_variable = { temp_array_id = 0 }
            to_bitwise_trigger = yes

            # Then, use bits to convert to digit array
            set_temp_variable = { temp_array_id = 0 }
            to_digit_array_trigger = yes

            # If parameter is 0, set it to large
            if = {
                limit = {
                    check_variable = { to_print_param = 0 }
                }
                set_temp_variable = { to_print_param = ieee_out_array^num }
            }

            # Finally, print digits out
            set_temp_variable = { print_sign_bit = ieee_sign_bit }
            set_temp_variable = { print_inf_flag = ieee_inf_flag }
            set_temp_variable = { print_nan_flag = ieee_nan_flag }
            set_temp_variable = { to_print_digit_power = 0 }

            # Set a few useful values for rounding later
            set_temp_variable = { least_sig_digit_idx = to_print_param }
            subtract_from_temp_variable = { least_sig_digit_idx = 1 }
            set_temp_variable = { least_sig_digit = ieee_out_array^least_sig_digit_idx }
            modulo_temp_variable = { least_sig_digit = 2 }
            set_temp_variable = { round_digit_threshold = to_print_param }
            add_to_temp_variable = { round_digit_threshold = 1 }
            all_of = {
                array = ieee_out_array
                value = val
                index = idx

                if = {
                    limit = {
                        check_variable = { idx < to_print_param }
                    }
                    add_to_temp_array = { to_print_digit_array = val }
                }
                else_if = {
                    limit = {
                        check_variable = { idx = to_print_param }
                        ### Rounds using the recommended TiesToEven, consult 4.3 (pg 27) in ieee_754.pdf
                        OR = {
                            check_variable = { val > 5 }
                            AND = {
                                check_variable = { val = 5 }
                                OR = {
                                    check_variable = { ieee_out_array^num > round_digit_threshold }
                                    check_variable = { least_sig_digit = 1 }
                                }
                            }
                        }

                    }
                    ### add one to previous var and propagate addition
                    add_to_temp_variable = { to_print_digit_array^least_sig_digit_idx = 1 }

                    all_of = {
                        array = ieee_out_array
                        index = idx
                        
                        # traverse array backwards
                        set_temp_variable = { carry_idx = ieee_out_array^num }
                        subtract_from_temp_variable = { carry_idx = idx }
                        subtract_from_temp_variable = { carry_idx = 1 }
                        
                        if = {
                            limit = {
                                check_variable = { to_print_digit_array^carry_idx > 9 }
                            }
                            subtract_from_temp_variable = { to_print_digit_array^carry_idx = 10 }

                            set_temp_variable = { prev_idx = carry_idx }
                            subtract_from_temp_variable = { prev_idx = 1 }
                            if = {
                                limit = {
                                    check_variable = { prev_idx = -1 }
                                }

                                add_to_temp_array = {
                                    array = to_print_digit_array
                                    index = 0
                                    value = 1
                                }
                                add_to_temp_variable = { ieee_out_power = 1 }
                            }
                            else = {
                                add_to_temp_variable = { to_print_digit_array^prev_idx = 1 }
                            }
                        }
                    }
                }
            }
            if = {
                limit = {
                    check_variable = { to_print_digit_array^num = 0 }
                }

                add_to_temp_array = { to_print_digit_array = 0 }
                set_temp_variable = { to_print_digit_power = 0 }
            }
            
            # Resize array to significant digits desired
            resize_temp_array = { to_print_digit_array = to_print_param }
        }
        localization_key = ieee_print_digit_sci
    }
}
# Prints the digits in to_print_digit_array and places the decimal in to_print_digit_power after potentially being processed in the wrappers
# Do not use the following scripted locs, since those are for use by this script
defined_text = {
    name = debug_print_digit
    text = {
        trigger = {
            NOT = { check_variable = { print_inf_flag = 0 } }
        }
        localization_key = ieee_infinity
    }
    text = {
        trigger = {
            NOT = { check_variable = { print_nan_flag = 0 } }
        }
        localization_key = ieee_nan
    }
    text = {
        trigger = {
            check_variable = { to_print_digit_array^num = 0 }
        }
        localization_key = ieee_error_empty
    }
    text = {
        trigger = {
            set_temp_variable = { temp_index = 0 }
            set_temp_variable = { temp_power = to_print_digit_power }
        }
        localization_key = ieee_debug_print_digit
    }
}
# If the power is less than 0, fills in the left of the decimal with zeroes
defined_text = {
    name = zero_padding
    text = {
        trigger = {
            NOT = { check_variable = { temp_power < 0 } }
        }
        localization_key = ieee_empty
    }
    text = {
        trigger = {
            add_to_temp_variable = { temp_power = 1 }
            set_temp_variable = { round_check = temp_power }
            divide_temp_variable = { round_check = 2 }
            round_temp_variable = round_check
            multiply_temp_variable = { round_check = 2 }

            check_variable = { temp_power = round_check }
        }
        localization_key = ieee_zero_1
    }
    text = {
        trigger = {
            add_to_temp_variable = { temp_power = 1 }
        }
        localization_key = ieee_zero_2
    }
}
defined_text = {
    name = zero_padding_step
    text = {
        trigger = {
            add_to_temp_variable = { temp_power = 2 }
            check_variable = { temp_power > 0 }
        }
        localization_key = ieee_empty
    }
    text = {
        localization_key = ieee_zero_rec
    }
}
# Recursively prints the next 2 digits and places decimal if needed
defined_text = {
    name = debug_print_digit_step
    text = {
        trigger = {
            add_to_temp_variable = { temp_index = 2 }

            set_temp_variable = { temp_index_a = temp_index }
            subtract_from_temp_variable = { temp_index_a = 2 }
            set_temp_variable = { temp_index_b = temp_index }
            subtract_from_temp_variable = { temp_index_b = 1 }

            subtract_from_temp_variable = { to_print_digit_power = 2 }

            set_temp_variable = { to_print_digit_power_a = to_print_digit_power }
            add_to_temp_variable = { to_print_digit_power_a = 2 }
            set_temp_variable = { to_print_digit_power_b = to_print_digit_power }
            add_to_temp_variable = { to_print_digit_power_b = 1 }

            always = no
        }
        localization_key = ieee_empty
    }
    text = {
        trigger = {
            check_variable = { temp_index > to_print_digit_array^num }
        }
        localization_key = ieee_print_digit_step_1
    }
    text = {
        trigger = {
            check_variable = { temp_index = to_print_digit_array^num }
        }
        localization_key = ieee_print_digit_step_2
    }
    text = {
        localization_key = ieee_print_digit_step_rec
    }
}
defined_text = {
    name = clear_digit_array
    text = {
        trigger = {
            clear_temp_array = to_print_digit_array
            set_temp_variable = { to_print_digit_power = 0 }
        }
        localization_key = ieee_empty
    }
}
defined_text = {
    name = decimal_decider_a
    text = {
        trigger = {
            check_variable = { to_print_digit_power_a = 0 }
        }
        localization_key = ieee_decimal_pt
    }
    text = {
        localization_key = ieee_empty
    }
}
defined_text = {
    name = decimal_decider_b
    text = {
        trigger = {
            check_variable = { to_print_digit_power_b = 0 }
        }
        localization_key = ieee_decimal_pt
    }
    text = {
        localization_key = ieee_empty
    }
}
# Helper to format scientific notation
defined_text = {
    name = debug_print_digit_sci
    text = {
        trigger = {
            NOT = { check_variable = { print_inf_flag = 0 } }
        }
        localization_key = ieee_infinity
    }
    text = {
        trigger = {
            NOT = { check_variable = { print_nan_flag = 0 } }
        }
        localization_key = ieee_nan
    }
    text = {
        trigger = {
            check_variable = { to_print_digit_array^num = 0 }
        }
        localization_key = ieee_error_empty
    }
    text = {
        trigger = {
            set_temp_variable = { temp_index = 0 }
            set_temp_variable = { temp_power = to_print_digit_power }
        }
        localization_key = ieee_debug_print_digit_sci
    }
}